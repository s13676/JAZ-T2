package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import domain.User;
import mapper.IMapResultSetToEntity;

public class UserRepository extends RepositoryBase<User> {
	protected PreparedStatement getWithLoginAndPassword;
	protected PreparedStatement getWithLogin;

	public UserRepository(Connection con, IMapResultSetToEntity<User> mapper) throws SQLException {
		super(con, mapper);
		
		try {
			getWithLoginAndPassword = connection.prepareStatement(getWithLoginAndPasswordSql());
			getWithLogin = connection.prepareStatement(getWithLoginSql());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void setUpdateQuery(User u) throws SQLException {
		update.setString(1, u.getUsername());
		update.setString(2, u.getPassword());
		update.setString(3, u.getEmail());
		update.setBoolean(4, u.getAdmin());
		update.setBoolean(5, u.getPremium());
		update.setInt(6, u.getId());
	}

	@Override
	public void setInsertQuery(User u) throws SQLException {
		insert.setString(1, u.getUsername());
		insert.setString(2, u.getPassword());
		insert.setString(3, u.getEmail());
		insert.setBoolean(4, u.getAdmin());
		insert.setBoolean(5, u.getPremium());

	}

	@Override
	protected String tableName() {
		return "user";
	}

	@Override
	protected String createTableSql() {
		return "CREATE TABLE IF NOT EXISTS user ("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "username VARCHAR(50)," + "password VARCHAR(20)," + "email VARCHAR(50),"
				+ "admin BOOLEAN," + "premium BOOLEAN"
				+ ")";
	}

	@Override
	protected String insertSql() {
		return "INSERT INTO user (username, password, email, admin, premium) VALUES (?,?,?,?,?)";
	}

	@Override
	protected String updateSql() {
		return "UPDATE user SET username = ?, password = ?, email = ?, admin = ?, premium = ? WHERE id = ?";
	}
	
	protected String getWithLoginAndPasswordSql() {
		return "select * from " + tableName() + " where username=? and password=? limit 1";
	}
	
	protected String getWithLoginSql() {
		return "select * from " + tableName() + " where username=? limit 1";
	}
	
	public User getUserWithLoginAndPass(String login, String password) {
		try {
			getWithLoginAndPassword.setString(1, login);
			getWithLoginAndPassword.setString(2, password);
			ResultSet rs = getWithLoginAndPassword.executeQuery();
			rs.next();
			
			return mapper.map(rs);

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public User getUserWithLogin(String username) {
		try {
			getWithLogin.setString(1, username);;
			ResultSet rs = getWithLogin.executeQuery();
			rs.next();
			
			return mapper.map(rs);

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
}